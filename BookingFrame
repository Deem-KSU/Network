import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

public class BookingFrame extends JFrame {
    
    private Client networkClient;
    private final String[] cities = {"Riyadh", "Jeddah", "Tabuk", "Mecca", "Medina", "Dammam"};
    private final String[] days = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}; 

    private JComboBox<String> departureCity;
    private JComboBox<String> arrivalCity;
    private JComboBox<String> dateSelector;
    private JRadioButton firstClass; 
    private JRadioButton economyClass; 
    private JButton bookButton;

    public BookingFrame(Client client) {
        this.networkClient = client;
        
        setTitle("Book New Ticket");
        setSize(450, 350);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        
        JPanel panel = new JPanel(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(8, 8, 8, 8); 
        gbc.fill = GridBagConstraints.HORIZONTAL;
        
        int row = 0;

        // Departure City
        gbc.gridx = 0; gbc.gridy = row;
        panel.add(new JLabel("Departure City:"), gbc);
        gbc.gridx = 1; gbc.gridy = row++;
        departureCity = new JComboBox<>(cities);
        panel.add(departureCity, gbc);

        // Arrival City
        gbc.gridx = 0; gbc.gridy = row;
        panel.add(new JLabel("Arrival City:"), gbc);
        gbc.gridx = 1; gbc.gridy = row++;
        arrivalCity = new JComboBox<>(cities);
        panel.add(arrivalCity, gbc);

        // Travel Class
        gbc.gridx = 0; gbc.gridy = row;
        panel.add(new JLabel("Travel Class:"), gbc);
        
        firstClass = new JRadioButton("First Class"); 
        economyClass = new JRadioButton("Economy Class", true);

        ButtonGroup classGroup = new ButtonGroup();
        classGroup.add(firstClass);
        classGroup.add(economyClass);
        
        JPanel radioPanel = new JPanel();
        radioPanel.add(firstClass);
        radioPanel.add(economyClass);
        
        gbc.gridx = 1; gbc.gridy = row++;
        panel.add(radioPanel, gbc);

        // Travel Day
        gbc.gridx = 0; gbc.gridy = row;
        panel.add(new JLabel("Travel Day:"), gbc);
        gbc.gridx = 1; gbc.gridy = row++;
        dateSelector = new JComboBox<>(days);
        panel.add(dateSelector, gbc);

        // Book Button
        gbc.gridx = 0; gbc.gridy = row;
        gbc.gridwidth = 2; 
        bookButton = new JButton("Book Ticket");
        panel.add(bookButton, gbc);

        add(panel);
        
        // يعتمد على رد السيرفر
        bookButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                bookButton.setEnabled(false); 

                String dep = (String) departureCity.getSelectedItem();
                String arr = (String) arrivalCity.getSelectedItem();
                int dayIndex = dateSelector.getSelectedIndex() + 1; 
                String seatClass = firstClass.isSelected() ? "first" : "economy";
                
                if (dep.equals(arr)) {
                    JOptionPane.showMessageDialog(BookingFrame.this, "Departure and Arrival cities cannot be the same.", "Input Error", JOptionPane.WARNING_MESSAGE);
                    bookButton.setEnabled(true);
                    return;
                }
                
                new Thread(() -> {
                    String finalTicketId = null;
                    try {
                        // 1. إرسال أمر FIND
                        String findCommand = String.format("FIND %s %s %d %s", dep, arr, dayIndex, seatClass);
                        networkClient.sendCommand(findCommand);
                        
                        // 2. استقبال رد الخادم (نتوقع "TICKET_FOUND:ID" أو "ERROR:...")
                        String findResponse = networkClient.receiveResponse(); 
                        
                        // التحقق من الرد الجديد
                        if (findResponse != null && findResponse.startsWith("TICKET_FOUND:")) {
                            
                            finalTicketId = findResponse.substring("TICKET_FOUND:".length());
                            
                            // 3. إرسال أمر RESERVE 
                            String reserveCommand = "RESERVE " + finalTicketId;
                            networkClient.sendCommand(reserveCommand);
                            
                            // 4. استقبال رد الحجز
                            String reserveResponse = networkClient.receiveResponse();
                            
                            // 5. التحقق من رد الحجز
                            if (reserveResponse != null && reserveResponse.contains("reserved successfully")) {
                                SwingUtilities.invokeLater(() -> {
                                    JOptionPane.showMessageDialog(BookingFrame.this, 
                                        "Booking successful!\nTicket ID: " + getTicketId() + "\nRoute: " + dep + " -> " + arr + "\nClass: " + seatClass + "\nDay: " + days[dayIndex-1], 
                                        "Booking Confirmation", JOptionPane.INFORMATION_MESSAGE);
                                    dispose();
                                });
                            } else {
                                SwingUtilities.invokeLater(() -> {
                                    JOptionPane.showMessageDialog(BookingFrame.this, 
                                        "Reservation Failed. Server Response: " + reserveResponse, 
                                        "Reservation Error", JOptionPane.WARNING_MESSAGE);
                                });
                            }
                            
                        } else {
                            // عدم التوفر أو فشل الاتصال/المهلة
                            SwingUtilities.invokeLater(() -> {
                                JOptionPane.showMessageDialog(BookingFrame.this, 
                                    "Sorry, no tickets available for this route, class, or day. Server Response: " + (findResponse == null ? "No response." : findResponse), 
                                    "Unavailable", JOptionPane.WARNING_MESSAGE);
                            });
                        }
                    } catch (Exception ex) {
                        SwingUtilities.invokeLater(() -> {
                            JOptionPane.showMessageDialog(BookingFrame.this, "Error during booking: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                        });
                    } finally {
                        SwingUtilities.invokeLater(() -> bookButton.setEnabled(true));
                    }
                }).start();
            }
        });
        
        setVisible(true);
    }
}
